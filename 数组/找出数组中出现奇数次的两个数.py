# 找出数组中出现奇数次的两个数
# 题目描述：
# 数组中有 N+2个数，其中N个数出现了偶数次，2个数出现了奇数次（这两个数不相等〉
# 请用 O(1) 的空间复杂度，找出这两个数 
# 注意：不需要知道具体位置，只需要找出这两数。

"""
方法一：字典，时间复杂度和空间复杂度都是 O(n), 不符合要求
方法二：异或法

通过异或运算，最后异或运算的结果肯定是那两个出现了奇数次的数异或运算的结果。
假设这两个出现奇数次的数分别为a与b，根据异或运算的性质，将二者异或运算的结果记为c。由于a和b不相等，所以c自然也不会为0。
此时只需知道c对应的二进制数中某一个位为1的位数。

因为c中第N位为1表示a或者b中有一个数的第N位也为1，假设该数为a。那么，当c与数组中第N位为1的数进行异或时，
也就是将c与a外加上其他第N位为1的出现过偶数次的数进行异或，化简即为c与a异或，结果即为b
"""

def get2Num(arr):
    if arr == None or len(arr)<1:
        return 
    result = 0
    # 计算数组中所有数字异或的结果
    i = 0
    while i < len(arr):
        result ^= arr[i]
        i += 1
    tmpResult = result   # 临时存储异或结果
    # 找出异或结果中其中一个位值为1的位数  （如1100，位值为1的位数为2和3）
    i = result
    position = 0     # 存储位值为1的位数
    while i & 1 == 0:
        position += 1
        i = i >> 1
    i = 0
    while i < len(arr):
        # 异或的结果与所有第position位为1的数异或，结果一定是出现一次的两个数中其中一个
        if ((arr[i] >> position) & 1) == 1: 
            result = result ^ arr[i] 
        i += 1
    # 得到另外一个出现奇数次的结果
    result1 = result ^ tmpResult
    return (result,result1)


a = [1, 3, 2, 3, 5, 6, 6, 5, 7, 2, 2, 7]
print(get2Num(a))